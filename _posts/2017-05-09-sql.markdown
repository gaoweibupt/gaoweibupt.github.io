---
lyout:      post
title:      "SQL查询问题"
subtitle:   "SQL查询问题"
date:       2017-05-09 16:47:00
author:     "galway"
header-img: "img/home-bg-o.jpg"
catalog:  ture
tags:
    - sql
    - 数据库
    - 存储
---


### 问题背景

最近在做一个统计的需求时，SQL方面遇到了不少问题，下面简化描述一下。
主要场景是有两个日志记录的表 A 和 B，A表是用户点击的行为日志记录，B表为用户实际通过点击访问主站的日志记录，表结构如下。

>```
>  > Table A Column: 
>  product_name
>  long_url
>  server_ip
>  response_time
>  dt
> 
> > Table B Column:
>  url
>```

我们需要统计出每天用户通过点击进入主站的一个转化率以及相应的时延等，输出报表如下。

统计需要注意的问题：

	* url中包含用户id，A.long_url = "www.baidu.com"+B.url
	* 需要统计用户的uv，取最大的response_time
	* 按两个维度进行统计，产品和页面，页面为url去掉用户id的部分
	* 点击量为表A中的数据量，展示量为表B中的数据量，转换率为表A中的行为转换成表B中的行为的比率，可以用展示量比上数据量获得

|product_name|click_num|show_num|response_time < 100|
| ---- | ----- | ---- |  ---- |
||||||

|page_name|click_num|show_num|response_time < 100|
| ---- | ----- | ---- |  ---- |
||||||

数据库为GreenPlum，暂时没有索引，不建议为了单独的统计需求添加索引，数据量大概在每张表2000w左右，每日新增100w。

### 起始解决思路

>```
> select * from 
> (select product_name, count(long_url) as click_num, count(case when response_time<100) from (select distinct long_url, product_name, max(response_time) as response_time from A where dt='20170509' and serve_ip in (xx,xx) group by long_url,product_name ) M group by product_name) t1 
> left join (select product_name ,count(long_url) as show_num from 
> (select distinct long_url, product_name from A where dt='20170509' and serve_ip in (xx,xx) group by long_url ) N where exists (select 1 from B where A.long_url = ('www.baidu.com'||B.url) group by product_name) ) t2 
> on t1.product_name=t2.product_name
>```
>
>```
> select * from 
> (select long_url, count(long_url) as click_num, count(case when response_time<100) from (select distinct long_url,max(response_time) as response_time  from A where dt='20170509' and serve_ip in (xx,xx) group by long_url) M group by long_url) t1 
> left join (select long_url ,count(long_url) as show_num from 
> (select distinct long_url from A where dt='20170509' and serve_ip in (xx,xx) group by long_url ) N where exists (select 1 from B where A.long_url = ('www.baidu.com'||B.url) group by product_name) ) t2 
> on t1.long_url=t2.long_url
>```

使用上述两个sql，一次查询就可以获得一张表的数据。
由于数据库为GreenPlum，所以前期没太考虑查询效率的问题，为了代码方便，使用了一条sql查询所需要的所有数据。真对page_name维度的统计，需要在代码中对url进行解析再汇总。
而随着数据量的增加，sql查询速度比较慢，很容易遇到go away的问题。



### 第一次优化

拆分left join
查询到left join操作比较耗时，所以第一次优化时直接将left join拆成了两个查询，获得数组之后再进行merge。
这样有个问题，当两边的子查询数据量都比较大时，非常耗内存，直接导致了脚本内存不够。


### 第二次优化

> ```
> select distinct long_url, product_name , max(response_time) as response_time from A 
> where dt='20170509' and serve_ip in (xx,xx) and where exists (select 1 from B where A.long_url = ('www.baidu.com'||B.url) group by long_url, product_name
> ```
>
> ```
> select distinct long_url, product_name , max(response_time) as response_time from A 
> where dt='20170509' and serve_ip in (xx,xx) and where not exists (select 1 from B where A.long_url = ('www.baidu.com'||B.url) group by long_url, product_name
> ```

在代码中对查询到的结果按行再统计，分别获得点击量和展现量，第一条sql为点击量，第二条sql查询点击量和展现量的差值。
经过两条sql，可以分别对产品和页面维度进行统计。
还可以在sql后面使用limit，进行分页统计，减少程序占用的内存

#### left join

* left join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录 
* right join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录
* inner join(等值连接) 只返回两个表中联结字段相等的行

多表关联占用的临时表空间比较大
A left join B on XX where XX
where 子句会在left join获得结果之后才执行，所以尽可能地把条件放在on，减少where的执行
使用join时，尽量避免复杂的子查询

### 第三次优化
在实际使用中，上述优化取得了正确的结果，但是分页执行速度非常慢，每页数据量大时又会超出内存限制。
distinct 和 group 时间占用太大，所以把 distinct 和 group by 去掉了，但是为了方便，仅保留了exist

> ```
> select long_url, product_name, response_time from A 
> where dt='20170509' and serve_ip in (xx,xx) and where exists (select 1 from B where A.long_url = ('www.baidu.com'||B.url)
> ```
> 
> ```
> select long_url, product_name , response_time from A 
> where dt='20170509' and serve_ip in (xx,xx)
> ```

将distinct max group by操作完全放到代码里面，通过对分页查询到的数据进行统计，时间上确实更快了

#### distinct 和 group by
group by 都比 distinct 性能要高，所以可以使用group by代替distinct时尽量使用
group by的字段最好加索引
exists 替换 distinct 可以提高效率

#### exists
exists 查询到存在的纪录就会停止
不要使用not exists,不存在的判断是需要扫描全表的

#### limit
limit 要配合order by 使用，否则查询到的结果不准确

### 下一步优化
将sql中的where exists 去掉，使用where XXX in (常量) 可以更快地提升速度

#### where in
where in 采用or进行比较，











